# Copyright 2004 The Apache Software Foundation.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# NLS_ENCODING=UNICODE
# NLS_MESSAGEFORMAT_ALL

# standard messages (Spec. 2.5.2.4)

# components
javax.faces.component.UIInput.CONVERSION = {0}: si \u00e8 verificato un errore di conversione
javax.faces.component.UIInput.REQUIRED = {0}: errore di convalida: il valore \u00e8 richiesto.
javax.faces.component.UIInput.UPDATE = {0}: si \u00e8 verificato un errore durante l''elaborazione delle informazioni inoltrate. 

javax.faces.component.UISelectOne.INVALID = {0}: errore di convalida: il valore non \u00e8 valido
javax.faces.component.UISelectMany.INVALID = {0}: errore di convalida: il valore non \u00e8 valido

# converters
javax.faces.converter.BigDecimalConverter.DECIMAL = {2}: ''{0}'' deve essere un numero decimale con segno.
javax.faces.converter.BigDecimalConverter.DECIMAL_detail = {2}: ''{0}'' deve essere un numero decimale con segno che consiste di zero o pi\u00f9 cifre, che possono essere seguite da un punto decimale o da una frazione.  Esempio: {1}
 
javax.faces.converter.BigIntegerConverter.BIGINTEGER = {2}: ''{0}'' deve essere un numero composto da una o pi\u00f9 cifre.
javax.faces.converter.BigIntegerConverter.BIGINTEGER_detail = {2}: ''{0}'' deve essere un numero composto da una o pi\u00f9 cifre. Esempio: {1}
 
javax.faces.converter.BooleanConverter.BOOLEAN = {1}: ''{0}'' deve essere ''true'' o ''false''.
javax.faces.converter.BooleanConverter.BOOLEAN_detail = {1}: ''{0}'' deve essere ''true'' o ''false''. Qualsiasi valore diverso da ''true'' restituir\u00e0 ''false''.

javax.faces.converter.ByteConverter.BYTE = {2}: ''{0}'' deve essere un numero compreso tra 0 e 255.
javax.faces.converter.ByteConverter.BYTE_detail = {2}: ''{0}'' deve essere un numero compreso tra 0 e 255. Esempio: {1}
 
javax.faces.converter.CharacterConverter.CHARACTER = {1}: ''{0}'' deve essere un carattere valido.
javax.faces.converter.CharacterConverter.CHARACTER_detail = {1}: ''{0}'' deve essere un carattere ASCII valido.

javax.faces.converter.DateTimeConverter.DATE = {2}: non \u00e8 stato possibile comprendere ''{0}'' come una data.
javax.faces.converter.DateTimeConverter.DATE_detail = {2}: non \u00e8 stato possibile comprendere ''{0}'' come una data. Esempio: {1} 
javax.faces.converter.DateTimeConverter.TIME = {2}: non \u00e8 stato possibile comprendere ''{0}'' come un''ora.
javax.faces.converter.DateTimeConverter.TIME_detail = {2}: non \u00e8 stato possibile comprendere ''{0}'' come un''ora. Esempio: {1} 
javax.faces.converter.DateTimeConverter.DATETIME = {2}: non \u00e8 stato possibile comprendere ''{0}'' come data e ora.
javax.faces.converter.DateTimeConverter.DATETIME_detail = {2}: non \u00e8 stato possibile comprendere ''{0}'' come data e ora. Esempio: {1} 
javax.faces.converter.DateTimeConverter.PATTERN_TYPE = {1}: \u00e8 necessario specificare un attributo ''pattern'' o ''type'' per convertire il valore ''{0}''.

javax.faces.converter.DoubleConverter.DOUBLE = {2}: ''{0}'' deve essere un numero composto da una o pi\u00f9 cifre.
javax.faces.converter.DoubleConverter.DOUBLE_detail = {2}: ''{0}'' deve essere un numero compreso tra 4.9E-324 e 1.7976931348623157E308 Esempio: {1}

javax.faces.converter.EnumConverter.ENUM = {2}: ''{0}'' deve essere convertibile in un''enumerazione.
javax.faces.converter.EnumConverter.ENUM_detail = {2}: ''{0}'' deve essere convertibile in un''enumerazione che contiene la costante ''{1}''.
javax.faces.converter.EnumConverter.ENUM_NO_CLASS = {1}: ''{0}'' deve essere convertibile in un''enumerazione ma non \u00e8 stata fornita alcuna classe enum.
javax.faces.converter.EnumConverter.ENUM_NO_CLASS_detail = {1}: ''{0}'' deve essere convertibile in un''enumerazione ma non \u00e8 stata fornita alcuna classe enum.

javax.faces.converter.FloatConverter.FLOAT = {2}: ''{0}'' deve essere un numero composto da una o pi\u00f9 cifre.
javax.faces.converter.FloatConverter.FLOAT_detail = {2}: ''{0}'' deve essere un numero compreso tra 1.4E-45 e 3.4028235E38 Esempio: {1}

javax.faces.converter.IntegerConverter.INTEGER = {2}: ''{0}'' deve essere un numero composto da una o pi\u00f9 cifre.
javax.faces.converter.IntegerConverter.INTEGER_detail = {2}: ''{0}'' deve essere un numero compreso tra -2147483648 e 2147483647 Esempio: {1}

javax.faces.converter.LongConverter.LONG = {2}: ''{0}'' deve essere un numero composto da una o pi\u00f9 cifre.
javax.faces.converter.LongConverter.LONG_detail = {2}: ''{0}'' deve essere un numero compreso tra -9223372036854775808 e 9223372036854775807 Esempio: {1}

javax.faces.converter.NumberConverter.CURRENCY = {2}: non \u00e8 stato possibile comprendere ''{0}'' come un valore valuta.
javax.faces.converter.NumberConverter.CURRENCY_detail = {2}: non \u00e8 stato possibile comprendere ''{0}'' come un valore valuta. Esempio: {1}
javax.faces.converter.NumberConverter.PERCENT = {2}: non \u00e8 stato possibile comprendere ''{0}'' come una percentuale.
javax.faces.converter.NumberConverter.PERCENT_detail = {2}: non \u00e8 stato possibile comprendere ''{0}'' come una percentuale. Esempio: {1}
javax.faces.converter.NumberConverter.NUMBER = {2}: ''{0}'' non \u00e8 un numero.
javax.faces.converter.NumberConverter.NUMBER_detail = {2}: ''{0}'' non \u00e8 un numero. Esempio: {1}
javax.faces.converter.NumberConverter.PATTERN = {2}: ''{0}'' non \u00e8 un pattern numerico.
javax.faces.converter.NumberConverter.PATTERN_detail = {2}: ''{0}'' non \u00e8 un pattern numerico. Esempio: {1}

javax.faces.converter.ShortConverter.SHORT = {2}: ''{0}'' deve essere un numero composto da una o pi\u00f9 cifre.
javax.faces.converter.ShortConverter.SHORT_detail = {2}: ''{0}'' deve essere un numero compreso tra -32768 e 32767 Esempio: {1}

javax.faces.converter.STRING = {1}: Non \u00e8 stato possibile convertire ''{0}'' in una stringa.

# validators
javax.faces.validator.NOT_IN_RANGE = Errore di convalida: l''attributo specificato non \u00e8 compreso tra i valori previsti {0} e {1}.

javax.faces.validator.DoubleRangeValidator.MAXIMUM = {1}: errore di convalida: il valore \u00e8 superiore al valore massimo consentito, ''{0}''
javax.faces.validator.DoubleRangeValidator.MINIMUM = {1}: errore di convalida: il valore \u00e8 inferiore al valore minimo consentito, ''{0}''
javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE = {2}: errore di convalida: l''attributo specificato non \u00e8 compreso tra i valori previsti {0} e {1}.
javax.faces.validator.DoubleRangeValidator.TYPE = {0}: errore di convalida: il valore non \u00e8 del tipo corretto

javax.faces.validator.LengthValidator.MAXIMUM = {1}: errore di convalida: la lunghezza \u00e8 superiore al valore massimo consentito, ''{0}''
javax.faces.validator.LengthValidator.MINIMUM = {1}: errore di convalida: la lunghezza \u00e8 inferiore al valore minimo consentito, ''{0}''

javax.faces.validator.LongRangeValidator.MAXIMUM = {1}: errore di convalida: il valore \u00e8 superiore al valore massimo consentito, ''{0}''
javax.faces.validator.LongRangeValidator.MINIMUM = {1}: errore di convalida: il valore \u00e8 inferiore al valore minimo consentito, ''{0}''
javax.faces.validator.LongRangeValidator.NOT_IN_RANGE = {2}: errore di convalida: l''attributo specificato non \u00e8 compreso tra i valori previsti {0} e {1}.
javax.faces.validator.LongRangeValidator.TYPE = {0}: errore di convalida: il valore non \u00e8 del tipo corretto.

javax.faces.validator.RegexValidator.NOT_MATCHED = {1}: errore di convalida: valore non conforme al pattern ''{0}''
javax.faces.validator.RegexValidator.PATTERN_NOT_SET = \u00c8 necessario impostare un pattern per la convalida.
javax.faces.validator.RegexValidator.MATCH_EXCEPTION = Il pattern non \u00e8 un''espressione regolare valida.

javax.faces.validator.BeanValidator.MESSAGE = {1}: {0}

# myfaces specific messages
org.apache.myfaces.renderkit.html.HtmlMessagesRenderer.IN_FIELD = \u0020in {0}
org.apache.myfaces.Email.INVALID = Errore di convalida
org.apache.myfaces.Email.INVALID_detail =Il valore fornito ({0}) non \u00e8 un indirizzo email corretto.

org.apache.myfaces.Equal.INVALID = Errore di convalida
org.apache.myfaces.Equal.INVALID_detail =Il valore fornito ({0}) non \u00e8 uguale al valore di "{1}".

org.apache.myfaces.Creditcard.INVALID = Errore di convalida
org.apache.myfaces.Creditcard.INVALID_detail =Il valore fornito ({0}) non \u00e8 un valore valido per una carta di credito

org.apache.myfaces.Regexpr.INVALID=Errore di convalida
org.apache.myfaces.Regexpr.INVALID_detail=Il valore ({0}) fornito non \u00e8 valido.

org.apache.myfaces.Date.INVALID = Errore di convalida
org.apache.myfaces.Date.INVALID_detail =Il valore fornito ({0}) non \u00e8 una data corretta

org.apache.myfaces.ticker.NOCONNECTION = Nessuna connessione: 
org.apache.myfaces.ticker.NOCONNECTION_detail = L''utente potrebbe essere protetto da un firewall.

org.apache.myfaces.ISBN.INVALID = Errore di convalida
org.apache.myfaces.ISBN.INVALID_detail =Il valore fornito ({0}) non \u00e8 un codice isbn corretto.

org.apache.myfaces.tree2.MISSING_NODE        = Nodo mancante
org.apache.myfaces.tree2.MISSING_NODE_detail = Il nodo richiesto "{0}" non esiste.

org.apache.myfaces.calendar.CONVERSION = Errore di conversione
org.apache.myfaces.calendar.CONVERSION_detail = "{0}": non \u00e8 stato possibile convertire il valore fornito "{1}" in una data.

org.apache.myfaces.FileUpload.SIZE_LIMIT = "{0}": il file caricato supera la dimensione massima di {1} byte.
